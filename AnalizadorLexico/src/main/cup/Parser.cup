package cup;

import java_cup.runtime.*;
import jflex.LexerCup;
import type_table.TypeTable;
import type_table.ValidateTypes;

//////////////////////// Código ////////////////////////
action code
{:
    // Tabla de tipos
    public TypeTable typeTable = new TypeTable();

    // Manejo de errores Sintacticos
    public int contadorErroresSintacticos = 0;

    public void revisionSintacticaCodigo(){
        if (contadorErroresSintacticos == 0){
            System.out.println("Código sintácticamente bien estructurado");
        }
        else{
            throw new Error("Cantidad de errores sintácticos encontrados: " + contadorErroresSintacticos);
        }
    }

    public void errorSintacticoEncontrado(){
        contadorErroresSintacticos += 1;
        System.out.println("Sentencia mal estructurada");
        System.out.println("Revise la sintaxis");
    }

    // Manejo de errores semanticos
        public int contadorErroresSemanticos = 0;

        public void revisionSemanticaCodigo(){
            if (contadorErroresSemanticos == 0){
                System.out.println("Código semánticamente bien estructurado");
            }
            else{
                throw new Error("Cantidad de errores semánticos encontrados: " + contadorErroresSemanticos);
            }
        }

        public void errorSemanticoEncontrado(String val, String explicacion){
            contadorErroresSemanticos += 1;
            System.out.println("");
            System.out.println("Error semántico recuperable de semántica:" + val);
            System.out.println(explicacion);
            System.out.println("Sentencia mal estructurada");
            System.out.println("Revise la semántica");
        }
:}

parser code {:
    
    // Lectura de los tokens
    LexerCup lexer;

    @SuppressWarnings("deprecation")
    public parser(LexerCup lexer){
        this.lexer = lexer;
        this.symbolFactory = new DefaultSymbolFactory();
    }
    
    // Recuperación de errores
    public void syntax_error(Symbol s){
        System.out.println("");
        System.out.println("Error sintáctico recuperable de sintáxis:" + s.value);
        System.out.println("Línea:" + (s.left+1));
        System.out.println("Columna:" + (s.right+1));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("");
        System.out.println("Error sintáctico no recuperable de sintáxis:" + s.value);
        System.out.println("Línea:" + (s.left+1));
        System.out.println("Columna:" + (s.right+1));
    }

:}

init with {: :};

scan with {: return lexer.next_token(); :};

//////////////////////// Terminales ////////////////////////
/* Identificadores */
terminal MAIN, IDENTIFICADOR;

/* Tipos */
terminal INTEGER, FLOAT, BOOL, CHAR, STRING;

/* Literales */
terminal LIT_INTEGER, LIT_FLOAT, LIT_CHAR, LIT_STRING, LIT_BOOL;

/* Operadores aritméticos */
terminal SUMA, RESTA, DIVISION, MULTIPLICACION,
        MODULO, POTENCIA, INCREMENTO, DECREMENTO;

/* Operadores relacionales */
terminal MENOR, MENOR_IGUAL, MAYOR,
        MAYOR_IGUAL, IGUALDAD, DIFERENTE;

/* Operadores lógicos */
terminal CONJUNCION, DISYUNCION, NEGACION;

/* Estructuras de control */
terminal IF, ELSE, WHILE, FOR,
        SWITCH, CASE, DEFAULT, BREAK,
        RETURN, DOS_PUNTOS;

/* Símbolos de estructura */
terminal COMA, PUNTO_COMA, NEGATIVO, BLOQUE_A,
        BLOQUE_C, CORCHETE_A, CORCHETE_C,
        PARENTESIS_A, PARENTESIS_C, ASIGNACION, DELIMITADOR;

/* Operaciones de lectura */
terminal PRINT, READ;

//////////////////////// No terminales ////////////////////////
/* Main */
non terminal programa;

/* Funciones */
non terminal funciones, funcion, encabezado_func;

/* Llamado de funciones */
non terminal func_call, parametros_call, param_call_aux;

/* Parámetros */
non terminal parametros, param_aux, parametro;

/* Bloques */
non terminal bloque, instrucciones, instruccion, estructuras, sentencia;

/* Expresiones */
non terminal expresion, expresion_aritmetica, expresion_relacional, expresion_logica;

/* Creaciones */
non terminal creacion, creacion_izq, creacion_variable, creacion_arreglos;

/* Asignaciones */
non terminal asignacion, asignacion_variable, asignacion_arreglos, asignacion_operacion;

/* Condicionales */
non terminal condicional, condicional_aux, condicional_if;

/* Iteraciones */
non terminal iteracion, iteracion_while, iteracion_for;

/* Switch */
non terminal switch, casos_con_default, casos_aux, caso;

/* Entrada y salida */
non terminal salida, entrada;

/* Retorno */
non terminal return;

/* Break */
non terminal break;

/* Generales */
non terminal operadores_aritmeticos, operadores_relacionales, operadores_logicos, operadores_unarios;

/* Generales */
non terminal factor, tipos, literales, num_negativos, operacion_unaria, valores_arreglos, identificador_func;

//////////////////////// Precedencia ////////////////////////
// Operadores aritméticos
precedence left INCREMENTO, DECREMENTO;
precedence left SUMA, RESTA;
precedence left DIVISION, MULTIPLICACION;
precedence left MODULO;
precedence left POTENCIA;

// Operadores relacionales
precedence left MENOR, MENOR_IGUAL, MAYOR, MAYOR_IGUAL, IGUALDAD, DIFERENTE;

// Operadores lógicos
precedence left CONJUNCION, DISYUNCION;
precedence left NEGACION;

// Otros
precedence left DELIMITADOR, PARENTESIS_C, IF, IDENTIFICADOR;

//////////////////////// Producciones ////////////////////////
/********************** Inicio **********************/
start with programa;

/********************** Programa **********************/
/* Sirve para revisar los errores del código y mostrar la tabla de símbolos */
programa ::= funciones {:
                            revisionSintacticaCodigo();
                            revisionSemanticaCodigo();
                            System.out.println(typeTable.toString());
                       :};

/********************** Funciones **********************/
funciones ::= funcion               // Reducción
            | funciones funcion;    // Recursividad de funciones

funcion ::= encabezado_func bloque;

encabezado_func ::= tipos:t identificador_func:id parametros
                    {: typeTable.addTable(t.toString(), id.toString()); :};
                    
/********************** Llamado de función **********************/

func_call ::= IDENTIFICADOR:i parametros_call {: RESULT = i.toString(); :}; // Deberían comprobarse parámetros

parametros_call ::= PARENTESIS_A PARENTESIS_C
             | PARENTESIS_A param_call_aux PARENTESIS_C;

param_call_aux ::= expresion
                 | param_call_aux COMA expresion;

/********************** Parámetros **********************/
parametros ::= PARENTESIS_A PARENTESIS_C            // Cero argumentos
            | PARENTESIS_A param_aux PARENTESIS_C;  // Uno o más argumentos


param_aux ::= parametro
            | param_aux COMA parametro;

parametro ::= tipos IDENTIFICADOR;

/********************** Bloques **********************/
bloque ::= BLOQUE_A instrucciones BLOQUE_C;

instrucciones ::= instruccion
                | instrucciones instruccion;

instruccion ::= estructuras
                | sentencia DELIMITADOR
                | error:e DELIMITADOR {: errorSintacticoEncontrado(); :}
                | error:e BLOQUE_C {: errorSintacticoEncontrado(); :};

estructuras ::= condicional
              | iteracion
              | switch;

sentencia ::= expresion
          | creacion
          | asignacion
          | entrada
          | salida
          | return
          | break;

/********************** Expresiones **********************/
expresion ::= PARENTESIS_A expresion:i  PARENTESIS_C {: RESULT = i.toString(); :}
            | expresion_logica:i   {: RESULT = i.toString(); :};

expresion_logica ::= expresion_logica:v1 operadores_logicos:op expresion_relacional:v2 {:
                                  if (!ValidateTypes.validateExprLog(v1.toString()) || v1.toString().equals("error")) {
                                      errorSemanticoEncontrado(v1.toString(),
                                      "El valor, identificador o expresión en ambos lados debe resultar en booleano");
                                      RESULT = "error";
                                  }
                                  if (!ValidateTypes.validateExprLog(v2.toString()) || v2.toString().equals("error")) {
                                      errorSemanticoEncontrado(v2.toString(),
                                      "El valor, identificador o expresión en ambos lados debe resultar en booleano");
                                      RESULT = "error";
                                  }
                                  RESULT = "expr_log";
                              :}
                    | NEGACION expresion_relacional:v1   {:
                                      if (!ValidateTypes.validateExprLog(v1.toString()) || v1.toString().equals("error")) {
                                          errorSemanticoEncontrado(v1.toString(),
                                          "El valor, identificador o expresión debe resultar en booleano");
                                          RESULT = "error";
                                      }
                                      RESULT = "expr_log";
                                  :}
                    | expresion_relacional:i   {: RESULT = i.toString(); :};

expresion_relacional ::= expresion_aritmetica:v1 operadores_relacionales:op expresion_aritmetica:v2 {:
                                    System.out.println("v1: " + v1.toString() + " v2: " + v2.toString() + " op: " + op.toString());
                                    if (ValidateTypes.validateExprRelNum(v1.toString(), v2.toString(), op.toString()) && !v1.toString().equals("error") && !v2.toString().equals("error")) {
                                        RESULT = "expr_rel";

                                    }
                                    else if (!ValidateTypes.validateExprRelBool(v1.toString(), v2.toString(), op.toString())) {
                                        errorSemanticoEncontrado(v1.toString() + " " + op.toString() + " " + v2.toString(),
                                        "El valor, identificador o expresión en ambos lados debe resultar en booleano");
                                        RESULT = "error";
                                    }
                                    else{
                                        errorSemanticoEncontrado(v1.toString() + " " + op.toString() + " " + v2.toString(),
                                        "El valor, identificador o expresión en ambos lados debe resultar en integer o float");
                                        RESULT = "error";
                                    }
                                :}
                        | expresion_aritmetica:i   {: RESULT = i.toString(); :};

expresion_aritmetica ::= expresion_aritmetica:v1 operadores_aritmeticos factor:v2 {:
                                                            if (!ValidateTypes.validateNumber(v1.toString())) {
                                                                errorSemanticoEncontrado(v1.toString(),
                                                                "El valor o identificador deber ser entero o decimal");
                                                                RESULT = "error";
                                                            }
                                                            if (!ValidateTypes.validateNumber(v2.toString())) {
                                                                errorSemanticoEncontrado(v2.toString(),
                                                                "El valor o identificador deber ser entero o decimal");
                                                                RESULT = "error";
                                                            }
                                                            RESULT = "expr_arit";
                                                        :}
                       | factor:i   {: RESULT = i.toString(); :};

/********************** Creaciones **********************/
creacion ::= creacion_variable
            | creacion_arreglos;
            
creacion_izq ::= tipos:t IDENTIFICADOR:id   {:
                                                typeTable.addRow(t.toString(), id.toString());
                                                RESULT = t.toString();
                                            :};

creacion_variable ::= creacion_izq:t {: RESULT = t.toString(); :}
                | creacion_izq:t ASIGNACION expresion:exp
                {:
                    if (!ValidateTypes.validateTypesAsign(ValidateTypes.getType(t.toString()), exp.toString())){
                        errorSemanticoEncontrado(ValidateTypes.getType(t.toString()) + " -> " + exp.toString(),
                                                "El tipo de la variable no coincide con el valor asignado");
                        RESULT = "error";
                    }
                :};

creacion_arreglos ::= creacion_izq:t CORCHETE_A expresion CORCHETE_C // Falta
                | creacion_izq:t CORCHETE_A expresion CORCHETE_C ASIGNACION CORCHETE_A valores_arreglos CORCHETE_C
                | creacion_izq:t CORCHETE_A CORCHETE_C ASIGNACION CORCHETE_A valores_arreglos CORCHETE_C;

/********************** Asignaciones **********************/
asignacion ::= asignacion_variable
             | asignacion_arreglos;

asignacion_variable ::= IDENTIFICADOR:id ASIGNACION expresion:exp {:
                           if (!ValidateTypes.validateTypesAsign(
                                                        ValidateTypes.getType(
                                                            typeTable.getRowTypeCurrentHash(id.toString())),
                                                        exp.toString())){
                               errorSemanticoEncontrado(ValidateTypes.getType(typeTable.getRowTypeCurrentHash(id.toString())) + " -> " + exp.toString(),
                                                       "El tipo de la variable no coincide con el valor asignado");
                               RESULT = "error";
                           }
                       :};

asignacion_arreglos ::= IDENTIFICADOR CORCHETE_A expresion CORCHETE_C ASIGNACION expresion;

/********************** Condicionales **********************/
condicional ::= condicional_aux
              | condicional_aux ELSE bloque;

condicional_aux ::= condicional_if
                | condicional_aux condicional_if;

condicional_if ::= IF PARENTESIS_A expresion_relacional PARENTESIS_C bloque;

/********************** Iteraciones **********************/
iteracion ::= iteracion_while
            | iteracion_for;

iteracion_while ::= WHILE PARENTESIS_A expresion_relacional PARENTESIS_C bloque;

iteracion_for ::= FOR PARENTESIS_A creacion_variable PUNTO_COMA expresion_relacional PUNTO_COMA
                                    operacion_unaria PARENTESIS_C bloque
                | FOR PARENTESIS_A asignacion_variable PUNTO_COMA expresion_relacional PUNTO_COMA
                                    operacion_unaria PARENTESIS_C bloque;

/********************** Switch **********************/
switch ::= SWITCH PARENTESIS_A expresion PARENTESIS_C BLOQUE_A casos_con_default BLOQUE_C;

casos_con_default ::= casos_aux
                    | casos_aux DEFAULT DOS_PUNTOS instrucciones;

casos_aux ::= caso
        | casos_aux caso;

caso ::= CASE literales DOS_PUNTOS instrucciones;

/********************** Entrada y salida **********************/
entrada ::= READ PARENTESIS_A IDENTIFICADOR PARENTESIS_C;

salida ::= PRINT PARENTESIS_A expresion PARENTESIS_C ;

/********************** Break **********************/
break ::= BREAK;

/********************** Retorno **********************/
return ::= RETURN
          | RETURN expresion;

/********************** Generales **********************/
factor ::= IDENTIFICADOR:i  {: RESULT = ValidateTypes.getType(typeTable.getRowTypeCurrentHash(i.toString())); :}
        | IDENTIFICADOR:i CORCHETE_A expresion:exp CORCHETE_C
         {:
            if (!ValidateTypes.validateNumber(exp.toString())){
                errorSemanticoEncontrado(exp.toString(),
                "La posición del arreglo debe ser un valor entero");
                RESULT = "error";
            }
            RESULT = ValidateTypes.getType(typeTable.getRowTypeCurrentHash(i.toString()));
        :}
        | literales:i  {: RESULT = ValidateTypes.getType(i.toString()); :}
        | operacion_unaria:i  {: RESULT = ValidateTypes.getType(i.toString()); :}
        | num_negativos:i  {: RESULT = ValidateTypes.getType(i.toString()); :}
        | func_call:i  {: RESULT = ValidateTypes.getType(typeTable.getTableType(i.toString())); :};

tipos ::= INTEGER:i {: RESULT = i.toString(); :}
        | FLOAT:i {: RESULT = i.toString(); :}
        | CHAR:i {: RESULT = i.toString(); :}
        | STRING:i {: RESULT = i.toString(); :}
        | BOOL:i {: RESULT = i.toString(); :};

literales ::= LIT_INTEGER:i {: RESULT = i.toString(); :}
            | LIT_FLOAT:i {: RESULT = i.toString(); :}
            | LIT_CHAR:i {: RESULT = i.toString(); :}
            | LIT_STRING:i {: RESULT = i.toString(); :}
            | LIT_BOOL:i {: RESULT = i.toString(); :};

num_negativos ::= NEGATIVO LIT_INTEGER:i {: RESULT = "-"+i.toString(); :}
                | NEGATIVO LIT_FLOAT:i {: RESULT = "-"+i.toString(); :}
                | NEGATIVO IDENTIFICADOR:i {: RESULT = "-"+i.toString(); :};

operacion_unaria ::= IDENTIFICADOR:i operadores_unarios {: RESULT = i.toString(); :} ;

valores_arreglos ::= expresion
                    | valores_arreglos COMA expresion;

identificador_func ::= IDENTIFICADOR:i {: RESULT = i.toString(); :}
                    | MAIN:i {: RESULT = i.toString(); :};

/********************** Operadores **********************/
operadores_aritmeticos ::= SUMA:i {: RESULT = i.toString(); :}
                | RESTA:i {: RESULT = i.toString(); :}
                | MULTIPLICACION:i {: RESULT = i.toString(); :}
                | DIVISION:i {: RESULT = i.toString(); :}
                | MODULO:i {: RESULT = i.toString(); :}
                | POTENCIA:i {: RESULT = i.toString(); :};

operadores_relacionales ::= MENOR:i {: RESULT = i.toString(); :}
                    | MENOR_IGUAL:i {: RESULT = i.toString(); :}
                    | MAYOR:i {: RESULT = i.toString(); :}
                    | MAYOR_IGUAL:i {: RESULT = i.toString(); :}
                    | IGUALDAD:i {: RESULT = i.toString(); :}
                    | DIFERENTE:i {: RESULT = i.toString(); :};

operadores_logicos ::= CONJUNCION:i {: RESULT = i.toString(); :}
                | DISYUNCION:i {: RESULT = i.toString(); :};

operadores_unarios ::= INCREMENTO:i {: RESULT = i.toString(); :}
                    | DECREMENTO:i {: RESULT = i.toString(); :};