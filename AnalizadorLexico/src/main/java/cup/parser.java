
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package cup;

import java_cup.runtime.*;
import jflex.LexerCup;
import type_table.TypeTable;
import type_table.ValidateTypes;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\004\000\002\005\005" +
    "\000\002\006\004\000\002\007\004\000\002\007\005\000" +
    "\002\010\003\000\002\010\005\000\002\011\004\000\002" +
    "\011\005\000\002\012\003\000\002\012\005\000\002\013" +
    "\004\000\002\014\005\000\002\015\003\000\002\015\004" +
    "\000\002\016\003\000\002\016\004\000\002\016\004\000" +
    "\002\016\004\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\021\005\000\002\021\003\000" +
    "\002\024\005\000\002\024\004\000\002\024\003\000\002" +
    "\023\005\000\002\023\003\000\002\022\005\000\002\022" +
    "\003\000\002\025\003\000\002\025\003\000\002\026\004" +
    "\000\002\027\003\000\002\027\005\000\002\030\006\000" +
    "\002\030\012\000\002\030\011\000\002\031\003\000\002" +
    "\031\003\000\002\032\005\000\002\033\010\000\002\035" +
    "\003\000\002\035\005\000\002\036\003\000\002\036\004" +
    "\000\002\037\007\000\002\040\003\000\002\040\003\000" +
    "\002\041\007\000\002\042\013\000\002\042\013\000\002" +
    "\043\011\000\002\044\003\000\002\044\006\000\002\045" +
    "\003\000\002\045\004\000\002\046\006\000\002\050\006" +
    "\000\002\047\006\000\002\052\003\000\002\051\003\000" +
    "\002\051\004\000\002\057\003\000\002\057\006\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\061\003\000" +
    "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
    "\061\003\000\002\062\004\000\002\062\004\000\002\062" +
    "\004\000\002\063\004\000\002\064\003\000\002\064\005" +
    "\000\002\065\003\000\002\065\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\055\003\000\002\055\003\000" +
    "\002\056\003\000\002\056\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\014\006\005\007\015\010\006\011\014\012" +
    "\012\001\002\000\004\002\313\001\002\000\006\004\uffb0" +
    "\005\uffb0\001\002\000\006\004\uffac\005\uffac\001\002\000" +
    "\016\002\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff" +
    "\001\002\000\006\004\277\005\276\001\002\000\004\056" +
    "\017\001\002\000\006\004\uffad\005\uffad\001\002\000\016" +
    "\002\000\006\005\007\015\010\006\011\014\012\012\001" +
    "\002\000\006\004\uffae\005\uffae\001\002\000\006\004\uffaf" +
    "\005\uffaf\001\002\000\016\002\ufffe\006\ufffe\007\ufffe\010" +
    "\ufffe\011\ufffe\012\ufffe\001\002\000\060\003\046\005\033" +
    "\006\005\007\015\010\006\011\014\012\012\013\063\014" +
    "\022\015\053\016\047\017\073\040\050\041\037\043\065" +
    "\044\026\045\060\050\056\051\045\055\027\062\067\066" +
    "\101\067\064\001\002\000\016\002\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\012\ufffd\001\002\000\066\003\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\040\uffe8\041\uffe8\043" +
    "\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8" +
    "\055\uffe8\057\uffe8\062\uffe8\066\uffe8\067\uffe8\001\002\000" +
    "\052\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa" +
    "\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036" +
    "\uffaa\037\uffaa\052\uffaa\053\uffaa\054\uffaa\061\uffaa\063\uffaa" +
    "\065\uffaa\001\002\000\062\003\046\005\033\006\005\007" +
    "\015\010\006\011\014\012\012\013\063\014\022\015\053" +
    "\016\047\017\073\040\050\041\037\043\065\044\026\045" +
    "\060\050\056\051\045\055\027\057\275\062\067\066\101" +
    "\067\064\001\002\000\066\003\uffc5\005\uffc5\006\uffc5\007" +
    "\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5" +
    "\016\uffc5\017\uffc5\040\uffc5\041\uffc5\043\uffc5\044\uffc5\045" +
    "\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\055\uffc5\057\uffc5" +
    "\062\uffc5\066\uffc5\067\uffc5\001\002\000\004\065\uffe4\001" +
    "\002\000\004\062\253\001\002\000\010\005\250\013\252" +
    "\014\251\001\002\000\020\036\uffdc\037\uffdc\053\uffdc\054" +
    "\uffdc\061\uffdc\063\uffdc\065\uffdc\001\002\000\004\065\uffd6" +
    "\001\002\000\004\065\uffce\001\002\000\052\020\uffb6\021" +
    "\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\111\027\107" +
    "\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036" +
    "\uffb6\037\uffb6\060\242\062\110\064\241\065\uffb6\001\002" +
    "\000\004\065\uffe3\001\002\000\066\003\uffc6\005\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\016\uffc6\017\uffc6\040\uffc6\041\uffc6\043\uffc6\044" +
    "\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\055\uffc6" +
    "\057\uffc6\062\uffc6\066\uffc6\067\uffc6\001\002\000\070\003" +
    "\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb" +
    "\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\040\uffcb\041" +
    "\037\042\236\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\051\uffcb\055\uffcb\057\uffcb\062\uffcb\066\uffcb\067" +
    "\uffcb\001\002\000\004\062\232\001\002\000\050\020\216" +
    "\021\225\022\224\023\221\024\223\025\215\030\217\031" +
    "\227\032\222\033\220\034\214\035\226\036\uffda\037\uffda" +
    "\053\uffda\054\uffda\061\uffda\063\uffda\065\uffda\001\002\000" +
    "\010\060\172\064\171\065\uffd4\001\002\000\066\003\ufff0" +
    "\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\040\ufff0\041\ufff0" +
    "\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051" +
    "\ufff0\055\ufff0\057\ufff0\062\ufff0\066\ufff0\067\ufff0\001\002" +
    "\000\066\003\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\040\uffe9\041\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047" +
    "\uffe9\050\uffe9\051\uffe9\055\uffe9\057\uffe9\062\uffe9\066\uffe9" +
    "\067\uffe9\001\002\000\004\065\uffe1\001\002\000\026\005" +
    "\105\013\063\014\022\015\053\016\047\017\073\040\050" +
    "\055\027\062\067\065\uffb8\001\002\000\006\057\166\065" +
    "\167\001\002\000\052\020\uffa8\021\uffa8\022\uffa8\023\uffa8" +
    "\024\uffa8\025\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034" +
    "\uffa8\035\uffa8\036\uffa8\037\uffa8\052\uffa8\053\uffa8\054\uffa8" +
    "\061\uffa8\063\uffa8\065\uffa8\001\002\000\020\005\105\013" +
    "\063\014\022\015\053\016\047\017\073\055\027\001\002" +
    "\000\004\065\uffe7\001\002\000\050\020\uffb4\021\uffb4\022" +
    "\uffb4\023\uffb4\024\uffb4\025\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\053\uffb4\054" +
    "\uffb4\061\uffb4\063\uffb4\065\uffb4\001\002\000\052\020\uffa9" +
    "\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\030\uffa9\031" +
    "\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9" +
    "\052\uffa9\053\uffa9\054\uffa9\061\uffa9\063\uffa9\065\uffa9\001" +
    "\002\000\004\065\uffd7\001\002\000\004\065\uffcf\001\002" +
    "\000\004\065\uffb9\001\002\000\066\003\uffea\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\015\uffea\016\uffea\017\uffea\040\uffea\041\uffea\043\uffea\044" +
    "\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea\055\uffea" +
    "\057\uffea\062\uffea\066\uffea\067\uffea\001\002\000\004\062" +
    "\144\001\002\000\070\003\uffc9\005\uffc9\006\uffc9\007\uffc9" +
    "\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016" +
    "\uffc9\017\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9" +
    "\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\055\uffc9\057" +
    "\uffc9\062\uffc9\066\uffc9\067\uffc9\001\002\000\004\065\uffe6" +
    "\001\002\000\052\020\uffab\021\uffab\022\uffab\023\uffab\024" +
    "\uffab\025\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab" +
    "\035\uffab\036\uffab\037\uffab\052\uffab\053\uffab\054\uffab\061" +
    "\uffab\063\uffab\065\uffab\001\002\000\004\062\141\001\002" +
    "\000\004\062\135\001\002\000\050\020\uffb3\021\uffb3\022" +
    "\uffb3\023\uffb3\024\uffb3\025\uffb3\030\uffb3\031\uffb3\032\uffb3" +
    "\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\053\uffb3\054" +
    "\uffb3\061\uffb3\063\uffb3\065\uffb3\001\002\000\024\005\105" +
    "\013\063\014\022\015\053\016\047\017\073\040\050\055" +
    "\027\062\067\001\002\000\020\036\130\037\131\053\uffdf" +
    "\054\uffdf\061\uffdf\063\uffdf\065\uffdf\001\002\000\004\065" +
    "\126\001\002\000\050\020\uffb2\021\uffb2\022\uffb2\023\uffb2" +
    "\024\uffb2\025\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034" +
    "\uffb2\035\uffb2\036\uffb2\037\uffb2\053\uffb2\054\uffb2\061\uffb2" +
    "\063\uffb2\065\uffb2\001\002\000\052\020\uffa7\021\uffa7\022" +
    "\uffa7\023\uffa7\024\uffa7\025\uffa7\030\uffa7\031\uffa7\032\uffa7" +
    "\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\052\uffa7\053" +
    "\uffa7\054\uffa7\061\uffa7\063\uffa7\065\uffa7\001\002\000\050" +
    "\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\053\uffd8\054\uffd8\061\uffd8\063\uffd8\065\uffd8\001" +
    "\002\000\004\065\uffe2\001\002\000\066\003\uffee\005\uffee" +
    "\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014" +
    "\uffee\015\uffee\016\uffee\017\uffee\040\uffee\041\uffee\043\uffee" +
    "\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051\uffee\055" +
    "\uffee\057\uffee\062\uffee\066\uffee\067\uffee\001\002\000\004" +
    "\065\uffe5\001\002\000\004\005\125\001\002\000\004\062" +
    "\103\001\002\000\050\020\uffb1\021\uffb1\022\uffb1\023\uffb1" +
    "\024\uffb1\025\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034" +
    "\uffb1\035\uffb1\036\uffb1\037\uffb1\053\uffb1\054\uffb1\061\uffb1" +
    "\063\uffb1\065\uffb1\001\002\000\024\005\105\013\063\014" +
    "\022\015\053\016\047\017\073\040\050\055\027\062\067" +
    "\001\002\000\004\063\124\001\002\000\060\020\uffb6\021" +
    "\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\111\027\107" +
    "\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036" +
    "\uffb6\037\uffb6\053\uffb6\054\uffb6\060\113\061\uffb6\062\110" +
    "\063\uffb6\065\uffb6\001\002\000\050\020\ufffb\021\ufffb\022" +
    "\ufffb\023\ufffb\024\ufffb\025\ufffb\030\ufffb\031\ufffb\032\ufffb" +
    "\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\053\ufffb\054" +
    "\ufffb\061\ufffb\063\ufffb\065\ufffb\001\002\000\050\020\uff8f" +
    "\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f\030\uff8f\031" +
    "\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f" +
    "\053\uff8f\054\uff8f\061\uff8f\063\uff8f\065\uff8f\001\002\000" +
    "\026\005\105\013\063\014\022\015\053\016\047\017\073" +
    "\040\050\055\027\062\067\063\120\001\002\000\050\020" +
    "\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90\030\uff90" +
    "\031\uff90\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037" +
    "\uff90\053\uff90\054\uff90\061\uff90\063\uff90\065\uff90\001\002" +
    "\000\050\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025" +
    "\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3" +
    "\036\uffa3\037\uffa3\053\uffa3\054\uffa3\061\uffa3\063\uffa3\065" +
    "\uffa3\001\002\000\024\005\105\013\063\014\022\015\053" +
    "\016\047\017\073\040\050\055\027\062\067\001\002\000" +
    "\004\061\115\001\002\000\050\020\uffb5\021\uffb5\022\uffb5" +
    "\023\uffb5\024\uffb5\025\uffb5\030\uffb5\031\uffb5\032\uffb5\033" +
    "\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\053\uffb5\054\uffb5" +
    "\061\uffb5\063\uffb5\065\uffb5\001\002\000\006\053\ufff8\063" +
    "\ufff8\001\002\000\006\053\121\063\122\001\002\000\050" +
    "\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\030" +
    "\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa" +
    "\037\ufffa\053\ufffa\054\ufffa\061\ufffa\063\ufffa\065\ufffa\001" +
    "\002\000\024\005\105\013\063\014\022\015\053\016\047" +
    "\017\073\040\050\055\027\062\067\001\002\000\050\020" +
    "\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\030\ufff9" +
    "\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037" +
    "\ufff9\053\ufff9\054\ufff9\061\ufff9\063\ufff9\065\ufff9\001\002" +
    "\000\006\053\ufff7\063\ufff7\001\002\000\004\065\uffba\001" +
    "\002\000\012\054\uffd5\060\uffd5\064\uffd5\065\uffd5\001\002" +
    "\000\066\003\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011" +
    "\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed" +
    "\040\uffed\041\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047" +
    "\uffed\050\uffed\051\uffed\055\uffed\057\uffed\062\uffed\066\uffed" +
    "\067\uffed\001\002\000\020\005\105\013\063\014\022\015" +
    "\053\016\047\017\073\055\027\001\002\000\020\005\uff92" +
    "\013\uff92\014\uff92\015\uff92\016\uff92\017\uff92\055\uff92\001" +
    "\002\000\020\005\uff91\013\uff91\014\uff91\015\uff91\016\uff91" +
    "\017\uff91\055\uff91\001\002\000\020\036\uffde\037\uffde\053" +
    "\uffde\054\uffde\061\uffde\063\uffde\065\uffde\001\002\000\004" +
    "\063\134\001\002\000\014\053\uffe0\054\uffe0\061\uffe0\063" +
    "\uffe0\065\uffe0\001\002\000\020\005\105\013\063\014\022" +
    "\015\053\016\047\017\073\055\027\001\002\000\004\063" +
    "\137\001\002\000\004\056\017\001\002\000\066\003\uffc4" +
    "\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\040\uffc4\041\uffc4" +
    "\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051" +
    "\uffc4\055\uffc4\057\uffc4\062\uffc4\066\uffc4\067\uffc4\001\002" +
    "\000\004\005\142\001\002\000\004\063\143\001\002\000" +
    "\004\065\uffbb\001\002\000\024\005\105\013\063\014\022" +
    "\015\053\016\047\017\073\040\050\055\027\062\067\001" +
    "\002\000\004\063\146\001\002\000\004\056\147\001\002" +
    "\000\004\046\153\001\002\000\010\046\153\047\161\057" +
    "\uffc0\001\002\000\004\057\160\001\002\000\010\046\uffbe" +
    "\047\uffbe\057\uffbe\001\002\000\014\013\063\014\022\015" +
    "\053\016\047\017\073\001\002\000\004\052\155\001\002" +
    "\000\060\003\046\005\033\006\005\007\015\010\006\011" +
    "\014\012\012\013\063\014\022\015\053\016\047\017\073" +
    "\040\050\041\037\043\065\044\026\045\060\050\056\051" +
    "\045\055\027\062\067\066\101\067\064\001\002\000\066" +
    "\003\046\005\033\006\005\007\015\010\006\011\014\012" +
    "\012\013\063\014\022\015\053\016\047\017\073\040\050" +
    "\041\037\043\065\044\026\045\060\046\uffbc\047\uffbc\050" +
    "\056\051\045\055\027\057\uffbc\062\067\066\101\067\064" +
    "\001\002\000\066\003\uffef\005\uffef\006\uffef\007\uffef\010" +
    "\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef" +
    "\017\uffef\040\uffef\041\uffef\043\uffef\044\uffef\045\uffef\046" +
    "\uffef\047\uffef\050\uffef\051\uffef\055\uffef\057\uffef\062\uffef" +
    "\066\uffef\067\uffef\001\002\000\066\003\uffc1\005\uffc1\006" +
    "\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1" +
    "\015\uffc1\016\uffc1\017\uffc1\040\uffc1\041\uffc1\043\uffc1\044" +
    "\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\055\uffc1" +
    "\057\uffc1\062\uffc1\066\uffc1\067\uffc1\001\002\000\004\052" +
    "\163\001\002\000\010\046\uffbd\047\uffbd\057\uffbd\001\002" +
    "\000\060\003\046\005\033\006\005\007\015\010\006\011" +
    "\014\012\012\013\063\014\022\015\053\016\047\017\073" +
    "\040\050\041\037\043\065\044\026\045\060\050\056\051" +
    "\045\055\027\062\067\066\101\067\064\001\002\000\062" +
    "\003\046\005\033\006\005\007\015\010\006\011\014\012" +
    "\012\013\063\014\022\015\053\016\047\017\073\040\050" +
    "\041\037\043\065\044\026\045\060\050\056\051\045\055" +
    "\027\057\uffbf\062\067\066\101\067\064\001\002\000\020" +
    "\036\uffdd\037\uffdd\053\uffdd\054\uffdd\061\uffdd\063\uffdd\065" +
    "\uffdd\001\002\000\066\003\uffeb\005\uffeb\006\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016" +
    "\uffeb\017\uffeb\040\uffeb\041\uffeb\043\uffeb\044\uffeb\045\uffeb" +
    "\046\uffeb\047\uffeb\050\uffeb\051\uffeb\055\uffeb\057\uffeb\062" +
    "\uffeb\066\uffeb\067\uffeb\001\002\000\066\003\uffec\005\uffec" +
    "\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014" +
    "\uffec\015\uffec\016\uffec\017\uffec\040\uffec\041\uffec\043\uffec" +
    "\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec\055" +
    "\uffec\057\uffec\062\uffec\066\uffec\067\uffec\001\002\000\004" +
    "\065\uffb7\001\002\000\024\005\105\013\063\014\022\015" +
    "\053\016\047\017\073\040\050\055\027\062\067\001\002" +
    "\000\026\005\105\013\063\014\022\015\053\016\047\017" +
    "\073\040\050\055\027\061\174\062\067\001\002\000\004" +
    "\061\204\001\002\000\004\064\175\001\002\000\004\060" +
    "\176\001\002\000\024\005\105\013\063\014\022\015\053" +
    "\016\047\017\073\040\050\055\027\062\067\001\002\000" +
    "\006\053\uffa2\061\uffa2\001\002\000\006\053\201\061\202" +
    "\001\002\000\024\005\105\013\063\014\022\015\053\016" +
    "\047\017\073\040\050\055\027\062\067\001\002\000\004" +
    "\065\uffd0\001\002\000\006\053\uffa1\061\uffa1\001\002\000" +
    "\006\064\205\065\uffd2\001\002\000\004\060\206\001\002" +
    "\000\024\005\105\013\063\014\022\015\053\016\047\017" +
    "\073\040\050\055\027\062\067\001\002\000\006\053\201" +
    "\061\210\001\002\000\004\065\uffd1\001\002\000\006\054" +
    "\uffd3\065\uffd3\001\002\000\020\005\105\013\063\014\022" +
    "\015\053\016\047\017\073\055\027\001\002\000\020\005" +
    "\105\013\063\014\022\015\053\016\047\017\073\055\027" +
    "\001\002\000\020\005\uff94\013\uff94\014\uff94\015\uff94\016" +
    "\uff94\017\uff94\055\uff94\001\002\000\020\005\uff99\013\uff99" +
    "\014\uff99\015\uff99\016\uff99\017\uff99\055\uff99\001\002\000" +
    "\020\005\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e" +
    "\055\uff9e\001\002\000\020\005\uff98\013\uff98\014\uff98\015" +
    "\uff98\016\uff98\017\uff98\055\uff98\001\002\000\020\005\uff95" +
    "\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95\055\uff95\001" +
    "\002\000\020\005\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c" +
    "\017\uff9c\055\uff9c\001\002\000\020\005\uff96\013\uff96\014" +
    "\uff96\015\uff96\016\uff96\017\uff96\055\uff96\001\002\000\020" +
    "\005\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\055" +
    "\uff9a\001\002\000\020\005\uff9b\013\uff9b\014\uff9b\015\uff9b" +
    "\016\uff9b\017\uff9b\055\uff9b\001\002\000\020\005\uff9d\013" +
    "\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\055\uff9d\001\002" +
    "\000\020\005\uff93\013\uff93\014\uff93\015\uff93\016\uff93\017" +
    "\uff93\055\uff93\001\002\000\020\005\uff97\013\uff97\014\uff97" +
    "\015\uff97\016\uff97\017\uff97\055\uff97\001\002\000\050\020" +
    "\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\053\uffd9\054\uffd9\061\uffd9\063\uffd9\065\uffd9\001\002" +
    "\000\034\020\216\021\225\022\224\023\221\024\223\025" +
    "\215\036\uffdb\037\uffdb\053\uffdb\054\uffdb\061\uffdb\063\uffdb" +
    "\065\uffdb\001\002\000\020\005\105\013\063\014\022\015" +
    "\053\016\047\017\073\055\027\001\002\000\004\063\234" +
    "\001\002\000\004\056\017\001\002\000\070\003\uffc7\005" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7" +
    "\014\uffc7\015\uffc7\016\uffc7\017\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\055\uffc7\057\uffc7\062\uffc7\066\uffc7\067\uffc7\001" +
    "\002\000\004\056\017\001\002\000\070\003\uffc8\005\uffc8" +
    "\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014" +
    "\uffc8\015\uffc8\016\uffc8\017\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051" +
    "\uffc8\055\uffc8\057\uffc8\062\uffc8\066\uffc8\067\uffc8\001\002" +
    "\000\066\003\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011" +
    "\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca" +
    "\040\uffca\041\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047" +
    "\uffca\050\uffca\051\uffca\055\uffca\057\uffca\062\uffca\066\uffca" +
    "\067\uffca\001\002\000\024\005\105\013\063\014\022\015" +
    "\053\016\047\017\073\040\050\055\027\062\067\001\002" +
    "\000\024\005\105\013\063\014\022\015\053\016\047\017" +
    "\073\040\050\055\027\062\067\001\002\000\004\061\244" +
    "\001\002\000\042\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024" +
    "\uffb5\025\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\064\245\065\uffb5\001\002\000" +
    "\024\005\105\013\063\014\022\015\053\016\047\017\073" +
    "\040\050\055\027\062\067\001\002\000\004\065\uffcc\001" +
    "\002\000\006\054\uffcd\065\uffcd\001\002\000\050\020\uffa4" +
    "\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\030\uffa4\031" +
    "\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4" +
    "\053\uffa4\054\uffa4\061\uffa4\063\uffa4\065\uffa4\001\002\000" +
    "\050\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5" +
    "\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036" +
    "\uffa5\037\uffa5\053\uffa5\054\uffa5\061\uffa5\063\uffa5\065\uffa5" +
    "\001\002\000\050\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024" +
    "\uffa6\025\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6" +
    "\035\uffa6\036\uffa6\037\uffa6\053\uffa6\054\uffa6\061\uffa6\063" +
    "\uffa6\065\uffa6\001\002\000\016\005\257\006\005\007\015" +
    "\010\006\011\014\012\012\001\002\000\004\054\267\001" +
    "\002\000\006\054\uffd4\064\171\001\002\000\004\054\260" +
    "\001\002\000\004\064\241\001\002\000\020\005\105\013" +
    "\063\014\022\015\053\016\047\017\073\055\027\001\002" +
    "\000\004\054\262\001\002\000\004\005\263\001\002\000" +
    "\006\026\111\027\107\001\002\000\004\063\265\001\002" +
    "\000\004\056\017\001\002\000\066\003\uffc2\005\uffc2\006" +
    "\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\040\uffc2\041\uffc2\043\uffc2\044" +
    "\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\055\uffc2" +
    "\057\uffc2\062\uffc2\066\uffc2\067\uffc2\001\002\000\020\005" +
    "\105\013\063\014\022\015\053\016\047\017\073\055\027" +
    "\001\002\000\004\054\271\001\002\000\004\005\263\001" +
    "\002\000\004\063\273\001\002\000\004\056\017\001\002" +
    "\000\066\003\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011" +
    "\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3" +
    "\040\uffc3\041\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\050\uffc3\051\uffc3\055\uffc3\057\uffc3\062\uffc3\066\uffc3" +
    "\067\uffc3\001\002\000\072\002\ufff1\003\ufff1\005\ufff1\006" +
    "\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\016\ufff1\017\ufff1\040\ufff1\041\ufff1\042\ufff1\043" +
    "\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1" +
    "\055\ufff1\057\ufff1\062\ufff1\066\ufff1\067\ufff1\001\002\000" +
    "\004\062\uffa0\001\002\000\004\062\uff9f\001\002\000\004" +
    "\062\302\001\002\000\004\056\ufffc\001\002\000\016\006" +
    "\005\007\015\010\006\011\014\012\012\063\306\001\002" +
    "\000\004\005\312\001\002\000\006\053\307\063\310\001" +
    "\002\000\006\053\ufff4\063\ufff4\001\002\000\004\056\ufff6" +
    "\001\002\000\014\006\005\007\015\010\006\011\014\012" +
    "\012\001\002\000\004\056\ufff5\001\002\000\006\053\ufff3" +
    "\063\ufff3\001\002\000\006\053\ufff2\063\ufff2\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\014\002\003\003\012\004\006\005\010\060" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\065\277\001\001\000" +
    "\004\014\017\001\001\000\002\001\001\000\010\004\015" +
    "\005\010\060\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\102\006\101\015\022\016\041" +
    "\017\075\020\070\021\050\022\037\023\027\024\067\025" +
    "\061\026\040\027\053\030\030\031\076\032\054\033\031" +
    "\035\056\036\035\037\060\040\042\041\034\042\023\043" +
    "\020\047\033\050\024\051\074\052\043\057\073\060\077" +
    "\061\051\062\071\063\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\100\006\101\016\156" +
    "\017\075\020\070\021\050\022\037\023\027\024\067\025" +
    "\061\026\040\027\053\030\030\031\076\032\054\033\031" +
    "\035\056\036\035\037\060\040\042\041\034\042\023\043" +
    "\020\047\033\050\024\051\074\052\043\057\073\060\077" +
    "\061\051\062\071\063\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\105\056\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\236\001\001\000\002\001\001\000\006\053" +
    "\212\054\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\006\101\021" +
    "\167\022\037\023\027\024\067\057\073\061\051\062\071" +
    "\063\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\101\022\037\023\164\057\073\061\051\062\071" +
    "\063\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\006\101\021" +
    "\132\022\037\023\027\024\067\057\073\061\051\062\071" +
    "\063\065\001\001\000\004\055\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\006\101\021\103\022\037\023\027\024\067\057\073\061" +
    "\051\062\071\063\065\001\001\000\002\001\001\000\006" +
    "\007\105\056\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\006\101\010\116\021\115\022\037\023\027" +
    "\024\067\057\073\061\051\062\071\063\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\101\021\113" +
    "\022\037\023\027\024\067\057\073\061\051\062\071\063" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\101\021\122\022\037\023\027\024\067\057\073\061\051" +
    "\062\071\063\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\101\022\037\023\131\057\073\061\051\062" +
    "\071\063\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\101\022\037\023\135\057\073\061\051\062\071" +
    "\063\065\001\001\000\002\001\001\000\004\014\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\006\101\021\144\022\037\023" +
    "\027\024\067\057\073\061\051\062\071\063\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\044\150\045" +
    "\147\046\151\001\001\000\004\046\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\153\001\001\000" +
    "\002\001\001\000\102\006\101\015\155\016\041\017\075" +
    "\020\070\021\050\022\037\023\027\024\067\025\061\026" +
    "\040\027\053\030\030\031\076\032\054\033\031\035\056" +
    "\036\035\037\060\040\042\041\034\042\023\043\020\047" +
    "\033\050\024\051\074\052\043\057\073\060\077\061\051" +
    "\062\071\063\065\001\001\000\100\006\101\016\156\017" +
    "\075\020\070\021\050\022\037\023\027\024\067\025\061" +
    "\026\040\027\053\030\030\031\076\032\054\033\031\035" +
    "\056\036\035\037\060\040\042\041\034\042\023\043\020" +
    "\047\033\050\024\051\074\052\043\057\073\060\077\061" +
    "\051\062\071\063\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\102\006" +
    "\101\015\163\016\041\017\075\020\070\021\050\022\037" +
    "\023\027\024\067\025\061\026\040\027\053\030\030\031" +
    "\076\032\054\033\031\035\056\036\035\037\060\040\042" +
    "\041\034\042\023\043\020\047\033\050\024\051\074\052" +
    "\043\057\073\060\077\061\051\062\071\063\065\001\001" +
    "\000\100\006\101\016\156\017\075\020\070\021\050\022" +
    "\037\023\027\024\067\025\061\026\040\027\053\030\030" +
    "\031\076\032\054\033\031\035\056\036\035\037\060\040" +
    "\042\041\034\042\023\043\020\047\033\050\024\051\074" +
    "\052\043\057\073\060\077\061\051\062\071\063\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\006\101\021\210\022\037\023" +
    "\027\024\067\057\073\061\051\062\071\063\065\001\001" +
    "\000\024\006\101\021\172\022\037\023\027\024\067\057" +
    "\073\061\051\062\071\063\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\006\101\021" +
    "\176\022\037\023\027\024\067\057\073\061\051\062\071" +
    "\063\065\064\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\006\101\021\202\022\037\023\027\024\067" +
    "\057\073\061\051\062\071\063\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\006\101\021\176\022\037\023\027\024\067\057" +
    "\073\061\051\062\071\063\065\064\206\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\101\022\230\057\073\061\051\062\071\063\065\001\001" +
    "\000\014\006\101\057\227\061\051\062\071\063\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\212\001\001\000\020\006\101\022\037" +
    "\023\232\057\073\061\051\062\071\063\065\001\001\000" +
    "\002\001\001\000\004\014\234\001\001\000\002\001\001" +
    "\000\004\014\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\006\101\021\246\022\037\023\027\024\067" +
    "\057\073\061\051\062\071\063\065\001\001\000\024\006" +
    "\101\021\242\022\037\023\027\024\067\057\073\061\051" +
    "\062\071\063\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\006\101\021\245\022\037\023\027\024\067" +
    "\057\073\061\051\062\071\063\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\026\254\027\253\032\255\060" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\101\022\037\023" +
    "\260\057\073\061\051\062\071\063\065\001\001\000\002" +
    "\001\001\000\004\063\263\001\001\000\004\056\111\001" +
    "\001\000\002\001\001\000\004\014\265\001\001\000\002" +
    "\001\001\000\020\006\101\022\037\023\267\057\073\061" +
    "\051\062\071\063\065\001\001\000\002\001\001\000\004" +
    "\063\271\001\001\000\002\001\001\000\004\014\273\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\300\001\001\000\002\001" +
    "\001\000\010\012\303\013\304\060\302\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\310\060\302\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }


    
    // Lectura de los tokens
    LexerCup lexer;

    @SuppressWarnings("deprecation")
    public parser(LexerCup lexer){
        this.lexer = lexer;
        this.symbolFactory = new DefaultSymbolFactory();
    }
    
    // Recuperación de errores
    public void syntax_error(Symbol s){
        System.out.println("");
        System.out.println("Error sintáctico recuperable de sintáxis:" + s.value);
        System.out.println("Línea:" + (s.left+1));
        System.out.println("Columna:" + (s.right+1));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("");
        System.out.println("Error sintáctico no recuperable de sintáxis:" + s.value);
        System.out.println("Línea:" + (s.left+1));
        System.out.println("Columna:" + (s.right+1));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    // Tabla de tipos
    public TypeTable typeTable = new TypeTable();

    // Manejo de errores Sintacticos
    public int contadorErroresSintacticos = 0;

    public void revisionSintacticaCodigo(){
        if (contadorErroresSintacticos == 0){
            System.out.println("Código sintácticamente bien estructurado");
        }
        else{
            throw new Error("Cantidad de errores sintácticos encontrados: " + contadorErroresSintacticos);
        }
    }

    public void errorSintacticoEncontrado(){
        contadorErroresSintacticos += 1;
        System.out.println("Sentencia mal estructurada");
        System.out.println("Revise la sintaxis");
    }

    // Manejo de errores semanticos
        public int contadorErroresSemanticos = 0;

        public void revisionSemanticaCodigo(){
            if (contadorErroresSemanticos == 0){
                System.out.println("Código semánticamente bien estructurado");
            }
            else{
                throw new Error("Cantidad de errores semánticos encontrados: " + contadorErroresSemanticos);
            }
        }

        public void errorSemanticoEncontrado(String val, String explicacion){
            contadorErroresSemanticos += 1;
            System.out.println("");
            System.out.println("Error semántico recuperable de semántica:" + val);
            System.out.println(explicacion);
            System.out.println("Sentencia mal estructurada");
            System.out.println("Revise la semántica");
        }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= funciones 
            {
              Object RESULT =null;
		
                            revisionSintacticaCodigo();
                            revisionSemanticaCodigo();
                            System.out.println(typeTable.toString());
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funcion ::= encabezado_func bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // encabezado_func ::= tipos identificador_func parametros 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 typeTable.addTable(t.toString(), id.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado_func",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // func_call ::= IDENTIFICADOR parametros_call 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametros_call ::= PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_call",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametros_call ::= PARENTESIS_A param_call_aux PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_call",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // param_call_aux ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_call_aux",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // param_call_aux ::= param_call_aux COMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_call_aux",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros ::= PARENTESIS_A param_aux PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // param_aux ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_aux",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // param_aux ::= param_aux COMA parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_aux",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametro ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bloque ::= BLOQUE_A instrucciones BLOQUE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instrucciones ::= instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= estructuras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= sentencia DELIMITADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= error DELIMITADOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 errorSintacticoEncontrado(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= error BLOQUE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 errorSintacticoEncontrado(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // estructuras ::= condicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuras",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // estructuras ::= iteracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuras",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // estructuras ::= switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuras",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= creacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= entrada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= salida 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= return 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= break 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= expresion_logica 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion_logica ::= expresion_logica operadores_logicos expresion_relacional 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                  if (!ValidateTypes.validateExprLog(v1.toString()) || v1.toString().equals("error")) {
                                      errorSemanticoEncontrado(v1.toString(),
                                      "El valor, identificador o expresión en ambos lados debe resultar en booleano");
                                      RESULT = "error";
                                  }
                                  if (!ValidateTypes.validateExprLog(v2.toString()) || v2.toString().equals("error")) {
                                      errorSemanticoEncontrado(v2.toString(),
                                      "El valor, identificador o expresión en ambos lados debe resultar en booleano");
                                      RESULT = "error";
                                  }
                                  RESULT = "expr_log";
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion_logica ::= NEGACION expresion_relacional 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                      if (!ValidateTypes.validateExprLog(v1.toString()) || v1.toString().equals("error")) {
                                          errorSemanticoEncontrado(v1.toString(),
                                          "El valor, identificador o expresión debe resultar en booleano");
                                          RESULT = "error";
                                      }
                                      RESULT = "expr_log";
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion_logica ::= expresion_relacional 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion_relacional ::= expresion_aritmetica operadores_relacionales expresion_aritmetica 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                    System.out.println("v1: " + v1.toString() + " v2: " + v2.toString() + " op: " + op.toString());
                                    if (ValidateTypes.validateExprRelNum(v1.toString(), v2.toString(), op.toString()) && !v1.toString().equals("error") && !v2.toString().equals("error")) {
                                        RESULT = "expr_rel";

                                    }
                                    else if (!ValidateTypes.validateExprRelBool(v1.toString(), v2.toString(), op.toString())) {
                                        errorSemanticoEncontrado(v1.toString() + " " + op.toString() + " " + v2.toString(),
                                        "El valor, identificador o expresión en ambos lados debe resultar en booleano");
                                        RESULT = "error";
                                    }
                                    else{
                                        errorSemanticoEncontrado(v1.toString() + " " + op.toString() + " " + v2.toString(),
                                        "El valor, identificador o expresión en ambos lados debe resultar en integer o float");
                                        RESULT = "error";
                                    }
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_relacional",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion_relacional ::= expresion_aritmetica 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_relacional",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion_aritmetica ::= expresion_aritmetica operadores_aritmeticos factor 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                            if (!ValidateTypes.validateNumber(v1.toString())) {
                                                                errorSemanticoEncontrado(v1.toString(),
                                                                "El valor o identificador deber ser entero o decimal");
                                                                RESULT = "error";
                                                            }
                                                            if (!ValidateTypes.validateNumber(v2.toString())) {
                                                                errorSemanticoEncontrado(v2.toString(),
                                                                "El valor o identificador deber ser entero o decimal");
                                                                RESULT = "error";
                                                            }
                                                            RESULT = "expr_arit";
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion_aritmetica ::= factor 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // creacion ::= creacion_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // creacion ::= creacion_arreglos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // creacion_izq ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                typeTable.addRow(t.toString(), id.toString());
                                                RESULT = t.toString();
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion_izq",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // creacion_variable ::= creacion_izq 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion_variable",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // creacion_variable ::= creacion_izq ASIGNACION expresion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if (!ValidateTypes.validateTypesAsign(ValidateTypes.getType(t.toString()), exp.toString())){
                        errorSemanticoEncontrado(ValidateTypes.getType(t.toString()) + " -> " + exp.toString(),
                                                "El tipo de la variable no coincide con el valor asignado");
                        RESULT = "error";
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion_variable",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // creacion_arreglos ::= creacion_izq CORCHETE_A expresion CORCHETE_C 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion_arreglos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // creacion_arreglos ::= creacion_izq CORCHETE_A expresion CORCHETE_C ASIGNACION CORCHETE_A valores_arreglos CORCHETE_C 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion_arreglos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // creacion_arreglos ::= creacion_izq CORCHETE_A CORCHETE_C ASIGNACION CORCHETE_A valores_arreglos CORCHETE_C 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion_arreglos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // asignacion ::= asignacion_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asignacion ::= asignacion_arreglos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // asignacion_variable ::= IDENTIFICADOR ASIGNACION expresion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           if (!ValidateTypes.validateTypesAsign(
                                                        ValidateTypes.getType(
                                                            typeTable.getRowTypeCurrentHash(id.toString())),
                                                        exp.toString())){
                               errorSemanticoEncontrado(ValidateTypes.getType(typeTable.getRowTypeCurrentHash(id.toString())) + " -> " + exp.toString(),
                                                       "El tipo de la variable no coincide con el valor asignado");
                               RESULT = "error";
                           }
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // asignacion_arreglos ::= IDENTIFICADOR CORCHETE_A expresion CORCHETE_C ASIGNACION expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_arreglos",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // condicional ::= condicional_aux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // condicional ::= condicional_aux ELSE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condicional_aux ::= condicional_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_aux",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condicional_aux ::= condicional_aux condicional_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_aux",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // condicional_if ::= IF PARENTESIS_A expresion_relacional PARENTESIS_C bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_if",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // iteracion ::= iteracion_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // iteracion ::= iteracion_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // iteracion_while ::= WHILE PARENTESIS_A expresion_relacional PARENTESIS_C bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion_while",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // iteracion_for ::= FOR PARENTESIS_A creacion_variable PUNTO_COMA expresion_relacional PUNTO_COMA operacion_unaria PARENTESIS_C bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion_for",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // iteracion_for ::= FOR PARENTESIS_A asignacion_variable PUNTO_COMA expresion_relacional PUNTO_COMA operacion_unaria PARENTESIS_C bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion_for",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // switch ::= SWITCH PARENTESIS_A expresion PARENTESIS_C BLOQUE_A casos_con_default BLOQUE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // casos_con_default ::= casos_aux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_con_default",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // casos_con_default ::= casos_aux DEFAULT DOS_PUNTOS instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_con_default",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // casos_aux ::= caso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_aux",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // casos_aux ::= casos_aux caso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_aux",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // caso ::= CASE literales DOS_PUNTOS instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // entrada ::= READ PARENTESIS_A IDENTIFICADOR PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entrada",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // salida ::= PRINT PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salida",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // break ::= BREAK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // return ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // return ::= RETURN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // factor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ValidateTypes.getType(typeTable.getRowTypeCurrentHash(i.toString())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // factor ::= IDENTIFICADOR CORCHETE_A expresion CORCHETE_C 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            if (!ValidateTypes.validateNumber(exp.toString())){
                errorSemanticoEncontrado(exp.toString(),
                "La posición del arreglo debe ser un valor entero");
                RESULT = "error";
            }
            RESULT = ValidateTypes.getType(typeTable.getRowTypeCurrentHash(i.toString()));
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // factor ::= literales 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ValidateTypes.getType(i.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // factor ::= operacion_unaria 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ValidateTypes.getType(i.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // factor ::= num_negativos 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ValidateTypes.getType(i.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // factor ::= func_call 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ValidateTypes.getType(typeTable.getTableType(i.toString())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tipos ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tipos ::= FLOAT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tipos ::= CHAR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tipos ::= STRING 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // tipos ::= BOOL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // literales ::= LIT_INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // literales ::= LIT_FLOAT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // literales ::= LIT_CHAR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // literales ::= LIT_STRING 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // literales ::= LIT_BOOL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // num_negativos ::= NEGATIVO LIT_INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "-"+i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_negativos",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // num_negativos ::= NEGATIVO LIT_FLOAT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "-"+i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_negativos",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // num_negativos ::= NEGATIVO IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "-"+i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_negativos",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operacion_unaria ::= IDENTIFICADOR operadores_unarios 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_unaria",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // valores_arreglos ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores_arreglos",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // valores_arreglos ::= valores_arreglos COMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores_arreglos",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // identificador_func ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificador_func",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // identificador_func ::= MAIN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificador_func",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operadores_aritmeticos ::= SUMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operadores_aritmeticos ::= RESTA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operadores_aritmeticos ::= MULTIPLICACION 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operadores_aritmeticos ::= DIVISION 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operadores_aritmeticos ::= MODULO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operadores_aritmeticos ::= POTENCIA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operadores_relacionales ::= MENOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores_relacionales",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operadores_relacionales ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores_relacionales",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operadores_relacionales ::= MAYOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores_relacionales",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operadores_relacionales ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores_relacionales",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operadores_relacionales ::= IGUALDAD 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores_relacionales",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operadores_relacionales ::= DIFERENTE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores_relacionales",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operadores_logicos ::= CONJUNCION 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores_logicos",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operadores_logicos ::= DISYUNCION 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores_logicos",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operadores_unarios ::= INCREMENTO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores_unarios",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operadores_unarios ::= DECREMENTO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadores_unarios",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
